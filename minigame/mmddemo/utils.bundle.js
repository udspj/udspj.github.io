!function(r){var n={};function e(t){if(n[t])return n[t].exports;var a=n[t]={i:t,l:!1,exports:{}};return r[t].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.m=r,e.c=n,e.d=function(r,n,t){e.o(r,n)||Object.defineProperty(r,n,{enumerable:!0,get:t})},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},e.t=function(r,n){if(1&n&&(r=e(r)),8&n)return r;if(4&n&&"object"==typeof r&&r&&r.__esModule)return r;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:r}),2&n&&"string"!=typeof r)for(var a in r)e.d(t,a,function(n){return r[n]}.bind(null,a));return t},e.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(n,"a",n),n},e.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},e.p="",e(e.s=17)}([function(r,n){r.exports=function(r){function n(r){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",r)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(r):"undefined"!=typeof eval?eval.call(null,r):n("EvalError: No eval function available")}catch(r){n(r)}}},,,,,,,,,,,,,,,,,function(r,n,e){"use strict";e.r(n);e(18),e(20),e(22),e(24)},function(r,n,e){e(0)(e(19))},function(r,n){r.exports="// cuon-utils.js (c) 2012 kanda and matsuda\r\n/**\r\n * Create a program object and make current\r\n * @param gl GL context\r\n * @param vshader a vertex shader program (string)\r\n * @param fshader a fragment shader program (string)\r\n * @return true, if the program object was created and successfully made current \r\n */\r\nfunction initShaders(gl, vshader, fshader) {\r\n  var program = createProgram(gl, vshader, fshader);\r\n  if (!program) {\r\n    console.log('Failed to create program');\r\n    return false;\r\n  }\r\n\r\n  gl.useProgram(program);\r\n  gl.program = program;\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Create the linked program object\r\n * @param gl GL context\r\n * @param vshader a vertex shader program (string)\r\n * @param fshader a fragment shader program (string)\r\n * @return created program object, or null if the creation has failed\r\n */\r\nfunction createProgram(gl, vshader, fshader) {\r\n  // Create shader object\r\n  var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);\r\n  var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);\r\n  if (!vertexShader || !fragmentShader) {\r\n    return null;\r\n  }\r\n\r\n  // Create a program object\r\n  var program = gl.createProgram();\r\n  if (!program) {\r\n    return null;\r\n  }\r\n\r\n  // Attach the shader objects\r\n  gl.attachShader(program, vertexShader);\r\n  gl.attachShader(program, fragmentShader);\r\n\r\n  // Link the program object\r\n  gl.linkProgram(program);\r\n\r\n  // Check the result of linking\r\n  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n  if (!linked) {\r\n    var error = gl.getProgramInfoLog(program);\r\n    console.log('Failed to link program: ' + error);\r\n    gl.deleteProgram(program);\r\n    gl.deleteShader(fragmentShader);\r\n    gl.deleteShader(vertexShader);\r\n    return null;\r\n  }\r\n  return program;\r\n}\r\n\r\n/**\r\n * Create a shader object\r\n * @param gl GL context\r\n * @param type the type of the shader object to be created\r\n * @param source shader program (string)\r\n * @return created shader object, or null if the creation has failed.\r\n */\r\nfunction loadShader(gl, type, source) {\r\n  // Create shader object\r\n  var shader = gl.createShader(type);\r\n  if (shader == null) {\r\n    console.log('unable to create shader');\r\n    return null;\r\n  }\r\n\r\n  // Set the shader program\r\n  gl.shaderSource(shader, source);\r\n\r\n  // Compile the shader\r\n  gl.compileShader(shader);\r\n\r\n  // Check the result of compilation\r\n  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n  if (!compiled) {\r\n    var error = gl.getShaderInfoLog(shader);\r\n    console.log('Failed to compile shader: ' + error);\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n\r\n  return shader;\r\n}\r\n\r\n/** \r\n * Initialize and get the rendering for WebGL\r\n * @param canvas <cavnas> element\r\n * @param opt_debug flag to initialize the context for debugging\r\n * @return the rendering context for WebGL\r\n */\r\nfunction getWebGLContext(canvas, opt_debug) {\r\n  // Get the rendering context for WebGL\r\n  var gl = WebGLUtils.setupWebGL(canvas);\r\n  if (!gl) return null;\r\n\r\n  // if opt_debug is explicitly false, create the context for debugging\r\n  if (arguments.length < 2 || opt_debug) {\r\n    gl = WebGLDebugUtils.makeDebugContext(gl);\r\n  }\r\n\r\n  return gl;\r\n}\r\n"},function(r,n,e){e(0)(e(21))},function(r,n){r.exports="// cuon-matrix.js (c) 2012 kanda and matsuda\r\n/** \r\n * This is a class treating 4x4 matrix.\r\n * This class contains the function that is equivalent to OpenGL matrix stack.\r\n * The matrix after conversion is calculated by multiplying a conversion matrix from the right.\r\n * The matrix is replaced by the calculated result.\r\n */\r\n\r\n/**\r\n * Constructor of Matrix4\r\n * If opt_src is specified, new matrix is initialized by opt_src.\r\n * Otherwise, new matrix is initialized by identity matrix.\r\n * @param opt_src source matrix(option)\r\n */\r\nvar Matrix4 = function(opt_src) {\r\n  var i, s, d;\r\n  if (opt_src && typeof opt_src === 'object' && opt_src.hasOwnProperty('elements')) {\r\n    s = opt_src.elements;\r\n    d = new Float32Array(16);\r\n    for (i = 0; i < 16; ++i) {\r\n      d[i] = s[i];\r\n    }\r\n    this.elements = d;\r\n  } else {\r\n    this.elements = new Float32Array([1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1]);\r\n  }\r\n};\r\n\r\n/**\r\n * Set the identity matrix.\r\n * @return this\r\n */\r\nMatrix4.prototype.setIdentity = function() {\r\n  var e = this.elements;\r\n  e[0] = 1;   e[4] = 0;   e[8]  = 0;   e[12] = 0;\r\n  e[1] = 0;   e[5] = 1;   e[9]  = 0;   e[13] = 0;\r\n  e[2] = 0;   e[6] = 0;   e[10] = 1;   e[14] = 0;\r\n  e[3] = 0;   e[7] = 0;   e[11] = 0;   e[15] = 1;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Copy matrix.\r\n * @param src source matrix\r\n * @return this\r\n */\r\nMatrix4.prototype.set = function(src) {\r\n  var i, s, d;\r\n\r\n  s = src.elements;\r\n  d = this.elements;\r\n\r\n  if (s === d) {\r\n    return;\r\n  }\r\n    \r\n  for (i = 0; i < 16; ++i) {\r\n    d[i] = s[i];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the matrix from the right.\r\n * @param other The multiply matrix\r\n * @return this\r\n */\r\nMatrix4.prototype.concat = function(other) {\r\n  var i, e, a, b, ai0, ai1, ai2, ai3;\r\n  \r\n  // Calculate e = a * b\r\n  e = this.elements;\r\n  a = this.elements;\r\n  b = other.elements;\r\n  \r\n  // If e equals b, copy b to temporary matrix.\r\n  if (e === b) {\r\n    b = new Float32Array(16);\r\n    for (i = 0; i < 16; ++i) {\r\n      b[i] = e[i];\r\n    }\r\n  }\r\n  \r\n  for (i = 0; i < 4; i++) {\r\n    ai0=a[i];  ai1=a[i+4];  ai2=a[i+8];  ai3=a[i+12];\r\n    e[i]    = ai0 * b[0]  + ai1 * b[1]  + ai2 * b[2]  + ai3 * b[3];\r\n    e[i+4]  = ai0 * b[4]  + ai1 * b[5]  + ai2 * b[6]  + ai3 * b[7];\r\n    e[i+8]  = ai0 * b[8]  + ai1 * b[9]  + ai2 * b[10] + ai3 * b[11];\r\n    e[i+12] = ai0 * b[12] + ai1 * b[13] + ai2 * b[14] + ai3 * b[15];\r\n  }\r\n  \r\n  return this;\r\n};\r\nMatrix4.prototype.multiply = Matrix4.prototype.concat;\r\n\r\n/**\r\n * Multiply the three-dimensional vector.\r\n * @param pos  The multiply vector\r\n * @return The result of multiplication(Float32Array)\r\n */\r\nMatrix4.prototype.multiplyVector3 = function(pos) {\r\n  var e = this.elements;\r\n  var p = pos.elements;\r\n  var v = new Vector3();\r\n  var result = v.elements;\r\n\r\n  result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + e[11];\r\n  result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + e[12];\r\n  result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + e[13];\r\n\r\n  return v;\r\n};\r\n\r\n/**\r\n * Multiply the four-dimensional vector.\r\n * @param pos  The multiply vector\r\n * @return The result of multiplication(Float32Array)\r\n */\r\nMatrix4.prototype.multiplyVector4 = function(pos) {\r\n  var e = this.elements;\r\n  var p = pos.elements;\r\n  var v = new Vector4();\r\n  var result = v.elements;\r\n\r\n  result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + p[3] * e[12];\r\n  result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + p[3] * e[13];\r\n  result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + p[3] * e[14];\r\n  result[3] = p[0] * e[3] + p[1] * e[7] + p[2] * e[11] + p[3] * e[15];\r\n\r\n  return v;\r\n};\r\n\r\n/**\r\n * Transpose the matrix.\r\n * @return this\r\n */\r\nMatrix4.prototype.transpose = function() {\r\n  var e, t;\r\n\r\n  e = this.elements;\r\n\r\n  t = e[ 1];  e[ 1] = e[ 4];  e[ 4] = t;\r\n  t = e[ 2];  e[ 2] = e[ 8];  e[ 8] = t;\r\n  t = e[ 3];  e[ 3] = e[12];  e[12] = t;\r\n  t = e[ 6];  e[ 6] = e[ 9];  e[ 9] = t;\r\n  t = e[ 7];  e[ 7] = e[13];  e[13] = t;\r\n  t = e[11];  e[11] = e[14];  e[14] = t;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Calculate the inverse matrix of specified matrix, and set to this.\r\n * @param other The source matrix\r\n * @return this\r\n */\r\nMatrix4.prototype.setInverseOf = function(other) {\r\n  var i, s, d, inv, det;\r\n\r\n  s = other.elements;\r\n  d = this.elements;\r\n  inv = new Float32Array(16);\r\n\r\n  inv[0]  =   s[5]*s[10]*s[15] - s[5] *s[11]*s[14] - s[9] *s[6]*s[15]\r\n            + s[9]*s[7] *s[14] + s[13]*s[6] *s[11] - s[13]*s[7]*s[10];\r\n  inv[4]  = - s[4]*s[10]*s[15] + s[4] *s[11]*s[14] + s[8] *s[6]*s[15]\r\n            - s[8]*s[7] *s[14] - s[12]*s[6] *s[11] + s[12]*s[7]*s[10];\r\n  inv[8]  =   s[4]*s[9] *s[15] - s[4] *s[11]*s[13] - s[8] *s[5]*s[15]\r\n            + s[8]*s[7] *s[13] + s[12]*s[5] *s[11] - s[12]*s[7]*s[9];\r\n  inv[12] = - s[4]*s[9] *s[14] + s[4] *s[10]*s[13] + s[8] *s[5]*s[14]\r\n            - s[8]*s[6] *s[13] - s[12]*s[5] *s[10] + s[12]*s[6]*s[9];\r\n\r\n  inv[1]  = - s[1]*s[10]*s[15] + s[1] *s[11]*s[14] + s[9] *s[2]*s[15]\r\n            - s[9]*s[3] *s[14] - s[13]*s[2] *s[11] + s[13]*s[3]*s[10];\r\n  inv[5]  =   s[0]*s[10]*s[15] - s[0] *s[11]*s[14] - s[8] *s[2]*s[15]\r\n            + s[8]*s[3] *s[14] + s[12]*s[2] *s[11] - s[12]*s[3]*s[10];\r\n  inv[9]  = - s[0]*s[9] *s[15] + s[0] *s[11]*s[13] + s[8] *s[1]*s[15]\r\n            - s[8]*s[3] *s[13] - s[12]*s[1] *s[11] + s[12]*s[3]*s[9];\r\n  inv[13] =   s[0]*s[9] *s[14] - s[0] *s[10]*s[13] - s[8] *s[1]*s[14]\r\n            + s[8]*s[2] *s[13] + s[12]*s[1] *s[10] - s[12]*s[2]*s[9];\r\n\r\n  inv[2]  =   s[1]*s[6]*s[15] - s[1] *s[7]*s[14] - s[5] *s[2]*s[15]\r\n            + s[5]*s[3]*s[14] + s[13]*s[2]*s[7]  - s[13]*s[3]*s[6];\r\n  inv[6]  = - s[0]*s[6]*s[15] + s[0] *s[7]*s[14] + s[4] *s[2]*s[15]\r\n            - s[4]*s[3]*s[14] - s[12]*s[2]*s[7]  + s[12]*s[3]*s[6];\r\n  inv[10] =   s[0]*s[5]*s[15] - s[0] *s[7]*s[13] - s[4] *s[1]*s[15]\r\n            + s[4]*s[3]*s[13] + s[12]*s[1]*s[7]  - s[12]*s[3]*s[5];\r\n  inv[14] = - s[0]*s[5]*s[14] + s[0] *s[6]*s[13] + s[4] *s[1]*s[14]\r\n            - s[4]*s[2]*s[13] - s[12]*s[1]*s[6]  + s[12]*s[2]*s[5];\r\n\r\n  inv[3]  = - s[1]*s[6]*s[11] + s[1]*s[7]*s[10] + s[5]*s[2]*s[11]\r\n            - s[5]*s[3]*s[10] - s[9]*s[2]*s[7]  + s[9]*s[3]*s[6];\r\n  inv[7]  =   s[0]*s[6]*s[11] - s[0]*s[7]*s[10] - s[4]*s[2]*s[11]\r\n            + s[4]*s[3]*s[10] + s[8]*s[2]*s[7]  - s[8]*s[3]*s[6];\r\n  inv[11] = - s[0]*s[5]*s[11] + s[0]*s[7]*s[9]  + s[4]*s[1]*s[11]\r\n            - s[4]*s[3]*s[9]  - s[8]*s[1]*s[7]  + s[8]*s[3]*s[5];\r\n  inv[15] =   s[0]*s[5]*s[10] - s[0]*s[6]*s[9]  - s[4]*s[1]*s[10]\r\n            + s[4]*s[2]*s[9]  + s[8]*s[1]*s[6]  - s[8]*s[2]*s[5];\r\n\r\n  det = s[0]*inv[0] + s[1]*inv[4] + s[2]*inv[8] + s[3]*inv[12];\r\n  if (det === 0) {\r\n    return this;\r\n  }\r\n\r\n  det = 1 / det;\r\n  for (i = 0; i < 16; i++) {\r\n    d[i] = inv[i] * det;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Calculate the inverse matrix of this, and set to this.\r\n * @return this\r\n */\r\nMatrix4.prototype.invert = function() {\r\n  return this.setInverseOf(this);\r\n};\r\n\r\n/**\r\n * Set the orthographic projection matrix.\r\n * @param left The coordinate of the left of clipping plane.\r\n * @param right The coordinate of the right of clipping plane.\r\n * @param bottom The coordinate of the bottom of clipping plane.\r\n * @param top The coordinate of the top top clipping plane.\r\n * @param near The distances to the nearer depth clipping plane. This value is minus if the plane is to be behind the viewer.\r\n * @param far The distances to the farther depth clipping plane. This value is minus if the plane is to be behind the viewer.\r\n * @return this\r\n */\r\nMatrix4.prototype.setOrtho = function(left, right, bottom, top, near, far) {\r\n  var e, rw, rh, rd;\r\n\r\n  if (left === right || bottom === top || near === far) {\r\n    throw 'null frustum';\r\n  }\r\n\r\n  rw = 1 / (right - left);\r\n  rh = 1 / (top - bottom);\r\n  rd = 1 / (far - near);\r\n\r\n  e = this.elements;\r\n\r\n  e[0]  = 2 * rw;\r\n  e[1]  = 0;\r\n  e[2]  = 0;\r\n  e[3]  = 0;\r\n\r\n  e[4]  = 0;\r\n  e[5]  = 2 * rh;\r\n  e[6]  = 0;\r\n  e[7]  = 0;\r\n\r\n  e[8]  = 0;\r\n  e[9]  = 0;\r\n  e[10] = -2 * rd;\r\n  e[11] = 0;\r\n\r\n  e[12] = -(right + left) * rw;\r\n  e[13] = -(top + bottom) * rh;\r\n  e[14] = -(far + near) * rd;\r\n  e[15] = 1;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the orthographic projection matrix from the right.\r\n * @param left The coordinate of the left of clipping plane.\r\n * @param right The coordinate of the right of clipping plane.\r\n * @param bottom The coordinate of the bottom of clipping plane.\r\n * @param top The coordinate of the top top clipping plane.\r\n * @param near The distances to the nearer depth clipping plane. This value is minus if the plane is to be behind the viewer.\r\n * @param far The distances to the farther depth clipping plane. This value is minus if the plane is to be behind the viewer.\r\n * @return this\r\n */\r\nMatrix4.prototype.ortho = function(left, right, bottom, top, near, far) {\r\n  return this.concat(new Matrix4().setOrtho(left, right, bottom, top, near, far));\r\n};\r\n\r\n/**\r\n * Set the perspective projection matrix.\r\n * @param left The coordinate of the left of clipping plane.\r\n * @param right The coordinate of the right of clipping plane.\r\n * @param bottom The coordinate of the bottom of clipping plane.\r\n * @param top The coordinate of the top top clipping plane.\r\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\r\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\r\n * @return this\r\n */\r\nMatrix4.prototype.setFrustum = function(left, right, bottom, top, near, far) {\r\n  var e, rw, rh, rd;\r\n\r\n  if (left === right || top === bottom || near === far) {\r\n    throw 'null frustum';\r\n  }\r\n  if (near <= 0) {\r\n    throw 'near <= 0';\r\n  }\r\n  if (far <= 0) {\r\n    throw 'far <= 0';\r\n  }\r\n\r\n  rw = 1 / (right - left);\r\n  rh = 1 / (top - bottom);\r\n  rd = 1 / (far - near);\r\n\r\n  e = this.elements;\r\n\r\n  e[ 0] = 2 * near * rw;\r\n  e[ 1] = 0;\r\n  e[ 2] = 0;\r\n  e[ 3] = 0;\r\n\r\n  e[ 4] = 0;\r\n  e[ 5] = 2 * near * rh;\r\n  e[ 6] = 0;\r\n  e[ 7] = 0;\r\n\r\n  e[ 8] = (right + left) * rw;\r\n  e[ 9] = (top + bottom) * rh;\r\n  e[10] = -(far + near) * rd;\r\n  e[11] = -1;\r\n\r\n  e[12] = 0;\r\n  e[13] = 0;\r\n  e[14] = -2 * near * far * rd;\r\n  e[15] = 0;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the perspective projection matrix from the right.\r\n * @param left The coordinate of the left of clipping plane.\r\n * @param right The coordinate of the right of clipping plane.\r\n * @param bottom The coordinate of the bottom of clipping plane.\r\n * @param top The coordinate of the top top clipping plane.\r\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\r\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\r\n * @return this\r\n */\r\nMatrix4.prototype.frustum = function(left, right, bottom, top, near, far) {\r\n  return this.concat(new Matrix4().setFrustum(left, right, bottom, top, near, far));\r\n};\r\n\r\n/**\r\n * Set the perspective projection matrix by fovy and aspect.\r\n * @param fovy The angle between the upper and lower sides of the frustum.\r\n * @param aspect The aspect ratio of the frustum. (width/height)\r\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\r\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\r\n * @return this\r\n */\r\nMatrix4.prototype.setPerspective = function(fovy, aspect, near, far) {\r\n  var e, rd, s, ct;\r\n\r\n  if (near === far || aspect === 0) {\r\n    throw 'null frustum';\r\n  }\r\n  if (near <= 0) {\r\n    throw 'near <= 0';\r\n  }\r\n  if (far <= 0) {\r\n    throw 'far <= 0';\r\n  }\r\n\r\n  fovy = Math.PI * fovy / 180 / 2;\r\n  s = Math.sin(fovy);\r\n  if (s === 0) {\r\n    throw 'null frustum';\r\n  }\r\n\r\n  rd = 1 / (far - near);\r\n  ct = Math.cos(fovy) / s;\r\n\r\n  e = this.elements;\r\n\r\n  e[0]  = ct / aspect;\r\n  e[1]  = 0;\r\n  e[2]  = 0;\r\n  e[3]  = 0;\r\n\r\n  e[4]  = 0;\r\n  e[5]  = ct;\r\n  e[6]  = 0;\r\n  e[7]  = 0;\r\n\r\n  e[8]  = 0;\r\n  e[9]  = 0;\r\n  e[10] = -(far + near) * rd;\r\n  e[11] = -1;\r\n\r\n  e[12] = 0;\r\n  e[13] = 0;\r\n  e[14] = -2 * near * far * rd;\r\n  e[15] = 0;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the perspective projection matrix from the right.\r\n * @param fovy The angle between the upper and lower sides of the frustum.\r\n * @param aspect The aspect ratio of the frustum. (width/height)\r\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\r\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\r\n * @return this\r\n */\r\nMatrix4.prototype.perspective = function(fovy, aspect, near, far) {\r\n  return this.concat(new Matrix4().setPerspective(fovy, aspect, near, far));\r\n};\r\n\r\n/**\r\n * Set the matrix for scaling.\r\n * @param x The scale factor along the X axis\r\n * @param y The scale factor along the Y axis\r\n * @param z The scale factor along the Z axis\r\n * @return this\r\n */\r\nMatrix4.prototype.setScale = function(x, y, z) {\r\n  var e = this.elements;\r\n  e[0] = x;  e[4] = 0;  e[8]  = 0;  e[12] = 0;\r\n  e[1] = 0;  e[5] = y;  e[9]  = 0;  e[13] = 0;\r\n  e[2] = 0;  e[6] = 0;  e[10] = z;  e[14] = 0;\r\n  e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the matrix for scaling from the right.\r\n * @param x The scale factor along the X axis\r\n * @param y The scale factor along the Y axis\r\n * @param z The scale factor along the Z axis\r\n * @return this\r\n */\r\nMatrix4.prototype.scale = function(x, y, z) {\r\n  var e = this.elements;\r\n  e[0] *= x;  e[4] *= y;  e[8]  *= z;\r\n  e[1] *= x;  e[5] *= y;  e[9]  *= z;\r\n  e[2] *= x;  e[6] *= y;  e[10] *= z;\r\n  e[3] *= x;  e[7] *= y;  e[11] *= z;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set the matrix for translation.\r\n * @param x The X value of a translation.\r\n * @param y The Y value of a translation.\r\n * @param z The Z value of a translation.\r\n * @return this\r\n */\r\nMatrix4.prototype.setTranslate = function(x, y, z) {\r\n  var e = this.elements;\r\n  e[0] = 1;  e[4] = 0;  e[8]  = 0;  e[12] = x;\r\n  e[1] = 0;  e[5] = 1;  e[9]  = 0;  e[13] = y;\r\n  e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = z;\r\n  e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the matrix for translation from the right.\r\n * @param x The X value of a translation.\r\n * @param y The Y value of a translation.\r\n * @param z The Z value of a translation.\r\n * @return this\r\n */\r\nMatrix4.prototype.translate = function(x, y, z) {\r\n  var e = this.elements;\r\n  e[12] += e[0] * x + e[4] * y + e[8]  * z;\r\n  e[13] += e[1] * x + e[5] * y + e[9]  * z;\r\n  e[14] += e[2] * x + e[6] * y + e[10] * z;\r\n  e[15] += e[3] * x + e[7] * y + e[11] * z;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set the matrix for rotation.\r\n * The vector of rotation axis may not be normalized.\r\n * @param angle The angle of rotation (degrees)\r\n * @param x The X coordinate of vector of rotation axis.\r\n * @param y The Y coordinate of vector of rotation axis.\r\n * @param z The Z coordinate of vector of rotation axis.\r\n * @return this\r\n */\r\nMatrix4.prototype.setRotate = function(angle, x, y, z) {\r\n  var e, s, c, len, rlen, nc, xy, yz, zx, xs, ys, zs;\r\n\r\n  angle = Math.PI * angle / 180;\r\n  e = this.elements;\r\n\r\n  s = Math.sin(angle);\r\n  c = Math.cos(angle);\r\n\r\n  if (0 !== x && 0 === y && 0 === z) {\r\n    // Rotation around X axis\r\n    if (x < 0) {\r\n      s = -s;\r\n    }\r\n    e[0] = 1;  e[4] = 0;  e[ 8] = 0;  e[12] = 0;\r\n    e[1] = 0;  e[5] = c;  e[ 9] =-s;  e[13] = 0;\r\n    e[2] = 0;  e[6] = s;  e[10] = c;  e[14] = 0;\r\n    e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  } else if (0 === x && 0 !== y && 0 === z) {\r\n    // Rotation around Y axis\r\n    if (y < 0) {\r\n      s = -s;\r\n    }\r\n    e[0] = c;  e[4] = 0;  e[ 8] = s;  e[12] = 0;\r\n    e[1] = 0;  e[5] = 1;  e[ 9] = 0;  e[13] = 0;\r\n    e[2] =-s;  e[6] = 0;  e[10] = c;  e[14] = 0;\r\n    e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  } else if (0 === x && 0 === y && 0 !== z) {\r\n    // Rotation around Z axis\r\n    if (z < 0) {\r\n      s = -s;\r\n    }\r\n    e[0] = c;  e[4] =-s;  e[ 8] = 0;  e[12] = 0;\r\n    e[1] = s;  e[5] = c;  e[ 9] = 0;  e[13] = 0;\r\n    e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = 0;\r\n    e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  } else {\r\n    // Rotation around another axis\r\n    len = Math.sqrt(x*x + y*y + z*z);\r\n    if (len !== 1) {\r\n      rlen = 1 / len;\r\n      x *= rlen;\r\n      y *= rlen;\r\n      z *= rlen;\r\n    }\r\n    nc = 1 - c;\r\n    xy = x * y;\r\n    yz = y * z;\r\n    zx = z * x;\r\n    xs = x * s;\r\n    ys = y * s;\r\n    zs = z * s;\r\n\r\n    e[ 0] = x*x*nc +  c;\r\n    e[ 1] = xy *nc + zs;\r\n    e[ 2] = zx *nc - ys;\r\n    e[ 3] = 0;\r\n\r\n    e[ 4] = xy *nc - zs;\r\n    e[ 5] = y*y*nc +  c;\r\n    e[ 6] = yz *nc + xs;\r\n    e[ 7] = 0;\r\n\r\n    e[ 8] = zx *nc + ys;\r\n    e[ 9] = yz *nc - xs;\r\n    e[10] = z*z*nc +  c;\r\n    e[11] = 0;\r\n\r\n    e[12] = 0;\r\n    e[13] = 0;\r\n    e[14] = 0;\r\n    e[15] = 1;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the matrix for rotation from the right.\r\n * The vector of rotation axis may not be normalized.\r\n * @param angle The angle of rotation (degrees)\r\n * @param x The X coordinate of vector of rotation axis.\r\n * @param y The Y coordinate of vector of rotation axis.\r\n * @param z The Z coordinate of vector of rotation axis.\r\n * @return this\r\n */\r\nMatrix4.prototype.rotate = function(angle, x, y, z) {\r\n  return this.concat(new Matrix4().setRotate(angle, x, y, z));\r\n};\r\n\r\n/**\r\n * Set the viewing matrix.\r\n * @param eyeX, eyeY, eyeZ The position of the eye point.\r\n * @param centerX, centerY, centerZ The position of the reference point.\r\n * @param upX, upY, upZ The direction of the up vector.\r\n * @return this\r\n */\r\nMatrix4.prototype.setLookAt = function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {\r\n  var e, fx, fy, fz, rlf, sx, sy, sz, rls, ux, uy, uz;\r\n\r\n  fx = centerX - eyeX;\r\n  fy = centerY - eyeY;\r\n  fz = centerZ - eyeZ;\r\n\r\n  // Normalize f.\r\n  rlf = 1 / Math.sqrt(fx*fx + fy*fy + fz*fz);\r\n  fx *= rlf;\r\n  fy *= rlf;\r\n  fz *= rlf;\r\n\r\n  // Calculate cross product of f and up.\r\n  sx = fy * upZ - fz * upY;\r\n  sy = fz * upX - fx * upZ;\r\n  sz = fx * upY - fy * upX;\r\n\r\n  // Normalize s.\r\n  rls = 1 / Math.sqrt(sx*sx + sy*sy + sz*sz);\r\n  sx *= rls;\r\n  sy *= rls;\r\n  sz *= rls;\r\n\r\n  // Calculate cross product of s and f.\r\n  ux = sy * fz - sz * fy;\r\n  uy = sz * fx - sx * fz;\r\n  uz = sx * fy - sy * fx;\r\n\r\n  // Set to this.\r\n  e = this.elements;\r\n  e[0] = sx;\r\n  e[1] = ux;\r\n  e[2] = -fx;\r\n  e[3] = 0;\r\n\r\n  e[4] = sy;\r\n  e[5] = uy;\r\n  e[6] = -fy;\r\n  e[7] = 0;\r\n\r\n  e[8] = sz;\r\n  e[9] = uz;\r\n  e[10] = -fz;\r\n  e[11] = 0;\r\n\r\n  e[12] = 0;\r\n  e[13] = 0;\r\n  e[14] = 0;\r\n  e[15] = 1;\r\n\r\n  // Translate.\r\n  return this.translate(-eyeX, -eyeY, -eyeZ);\r\n};\r\n\r\n/**\r\n * Multiply the viewing matrix from the right.\r\n * @param eyeX, eyeY, eyeZ The position of the eye point.\r\n * @param centerX, centerY, centerZ The position of the reference point.\r\n * @param upX, upY, upZ The direction of the up vector.\r\n * @return this\r\n */\r\nMatrix4.prototype.lookAt = function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {\r\n  return this.concat(new Matrix4().setLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ));\r\n};\r\n\r\n/**\r\n * Multiply the matrix for project vertex to plane from the right.\r\n * @param plane The array[A, B, C, D] of the equation of plane \"Ax + By + Cz + D = 0\".\r\n * @param light The array which stored coordinates of the light. if light[3]=0, treated as parallel light.\r\n * @return this\r\n */\r\nMatrix4.prototype.dropShadow = function(plane, light) {\r\n  var mat = new Matrix4();\r\n  var e = mat.elements;\r\n\r\n  var dot = plane[0] * light[0] + plane[1] * light[1] + plane[2] * light[2] + plane[3] * light[3];\r\n\r\n  e[ 0] = dot - light[0] * plane[0];\r\n  e[ 1] =     - light[1] * plane[0];\r\n  e[ 2] =     - light[2] * plane[0];\r\n  e[ 3] =     - light[3] * plane[0];\r\n\r\n  e[ 4] =     - light[0] * plane[1];\r\n  e[ 5] = dot - light[1] * plane[1];\r\n  e[ 6] =     - light[2] * plane[1];\r\n  e[ 7] =     - light[3] * plane[1];\r\n\r\n  e[ 8] =     - light[0] * plane[2];\r\n  e[ 9] =     - light[1] * plane[2];\r\n  e[10] = dot - light[2] * plane[2];\r\n  e[11] =     - light[3] * plane[2];\r\n\r\n  e[12] =     - light[0] * plane[3];\r\n  e[13] =     - light[1] * plane[3];\r\n  e[14] =     - light[2] * plane[3];\r\n  e[15] = dot - light[3] * plane[3];\r\n\r\n  return this.concat(mat);\r\n}\r\n\r\n/**\r\n * Multiply the matrix for project vertex to plane from the right.(Projected by parallel light.)\r\n * @param normX, normY, normZ The normal vector of the plane.(Not necessary to be normalized.)\r\n * @param planeX, planeY, planeZ The coordinate of arbitrary points on a plane.\r\n * @param lightX, lightY, lightZ The vector of the direction of light.(Not necessary to be normalized.)\r\n * @return this\r\n */\r\nMatrix4.prototype.dropShadowDirectionally = function(normX, normY, normZ, planeX, planeY, planeZ, lightX, lightY, lightZ) {\r\n  var a = planeX * normX + planeY * normY + planeZ * normZ;\r\n  return this.dropShadow([normX, normY, normZ, -a], [lightX, lightY, lightZ, 0]);\r\n};\r\n\r\n/**\r\n * Constructor of Vector3\r\n * If opt_src is specified, new vector is initialized by opt_src.\r\n * @param opt_src source vector(option)\r\n */\r\nvar Vector3 = function(opt_src) {\r\n  var v = new Float32Array(3);\r\n  if (opt_src && typeof opt_src === 'object') {\r\n    v[0] = opt_src[0]; v[1] = opt_src[1]; v[2] = opt_src[2];\r\n  } \r\n  this.elements = v;\r\n}\r\n\r\n/**\r\n  * Normalize.\r\n  * @return this\r\n  */\r\nVector3.prototype.normalize = function() {\r\n  var v = this.elements;\r\n  var c = v[0], d = v[1], e = v[2], g = Math.sqrt(c*c+d*d+e*e);\r\n  if(g){\r\n    if(g == 1)\r\n        return this;\r\n   } else {\r\n     v[0] = 0; v[1] = 0; v[2] = 0;\r\n     return this;\r\n   }\r\n   g = 1/g;\r\n   v[0] = c*g; v[1] = d*g; v[2] = e*g;\r\n   return this;\r\n};\r\n\r\n/**\r\n * Constructor of Vector4\r\n * If opt_src is specified, new vector is initialized by opt_src.\r\n * @param opt_src source vector(option)\r\n */\r\nvar Vector4 = function(opt_src) {\r\n  var v = new Float32Array(4);\r\n  if (opt_src && typeof opt_src === 'object') {\r\n    v[0] = opt_src[0]; v[1] = opt_src[1]; v[2] = opt_src[2]; v[3] = opt_src[3];\r\n  } \r\n  this.elements = v;\r\n}\r\n"},function(r,n,e){e(0)(e(23))},function(r,n){r.exports="\nvar VSHADER_SOURCE = 'attribute vec4 a_Position; \\n' +\n'attribute vec4 a_Color; \\n' +\n'uniform mat4 u_ViewMatrix; \\n' +\n'uniform mat4 u_ProjMatrix; \\n' +\n'uniform mat4 u_ModelMatrix; \\n' +\n// 'varying vec4 v_Color; \\n' +\n// ' attribute vec4 a_Normal; \\n' +\n// ' uniform vec3 u_LightColor; \\n' +\n// ' uniform vec3 u_LightDirection; \\n' +\n'attribute vec2 a_TexCoord; \\n' +\n'varying vec2 v_TexCoord; \\n' +\n'void main() { \\n' +\n' gl_Position = u_ProjMatrix * u_ViewMatrix * u_ModelMatrix * a_Position; \\n' +\n' v_TexCoord = a_TexCoord; \\n' +\n// 'vec3 normal = normalize(vec3(a_Normal)); \\n' +\n// 'float nDotL = max(dot(u_LightDirection, normal), 0.0); \\n' +\n// 'vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL; \\n' +\n// // ' v_Color = a_Color; \\n' +\n// 'v_Color = vec4(diffuse, a_Color.a); \\n' +\n'} \\n';\n\nvar FSHADER_SOURCE = 'precision mediump float; \\n' +\n'uniform sampler2D u_Sampler0; \\n' +\n'varying vec2 v_TexCoord; \\n' +\n'void main() { \\n' +\n' vec4 color0 = texture2D(u_Sampler0, v_TexCoord); \\n' +\n' gl_FragColor = color0; \\n' +\n'} \\n';"},function(r,n,e){e(0)(e(25))},function(r,n){r.exports="\n// var vertices = new Float32Array([\n//     -0.5,  0.5,\n//     -0.5, -0.5,\n//      0.5,  0.5,\n//      0.5, -0.5,\n//     ]);\n\nvar TexCoords = new Float32Array([\n  0.0, 1.0,  0.0, 0.0,   1.0, 0.0,   1.0, 1.0,\n  0.0, 1.0,  0.0, 0.0,   1.0, 0.0,   1.0, 1.0,\n  1.0, 1.0,  0.0, 1.0,   0.0, 0.0,   1.0, 0.0,\n  1.0, 1.0,  0.0, 1.0,   0.0, 0.0,   1.0, 0.0,\n  0.0, 0.0,   1.0, 0.0,   1.0, 1.0,  0.0, 1.0\n    ]);\n\n  var vertices = new Float32Array([   // Coordinates\n     // 1.0, 1.0, 1.0,  -1.0, 1.0, 1.0,  -1.0,-1.0, 1.0,   1.0,-1.0, 1.0, // v0-v1-v2-v3 front\n     1.0, 1.0, 3.0,   1.0,-1.0, 3.0,   1.0,-1.0,-3.0,   1.0, 1.0,-3.0, // v0-v3-v4-v5 right\n     1.0, 1.0, 3.0,   1.0, 1.0,-3.0,  -1.0, 1.0,-3.0,  -1.0, 1.0, 3.0, // v0-v5-v6-v1 up\n    -1.0, 1.0, 3.0,  -1.0, 1.0,-3.0,  -1.0,-1.0,-3.0,  -1.0,-1.0, 3.0, // v1-v6-v7-v2 left\n    -1.0,-1.0,-3.0,   1.0,-1.0,-3.0,   1.0,-1.0, 3.0,  -1.0,-1.0, 3.0, // v7-v4-v3-v2 down\n     1.0,-1.0,-3.0,  -1.0,-1.0,-3.0,  -1.0, 1.0,-3.0,   1.0, 1.0,-3.0  // v4-v7-v6-v5 back\n  ]);\n\n\n //  var colors = new Float32Array([    // Colors\n //    // 1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v0-v1-v2-v3 front\n //    1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v0-v3-v4-v5 right\n //    1, 1, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v0-v5-v6-v1 up\n //    1, 0, 0,   1, 1, 1,   1, 0, 0,  1, 0, 0,     // v1-v6-v7-v2 left\n //    1, 0, 0,   1, 0, 0,   1, 1, 1,  1, 0, 0,     // v7-v4-v3-v2 down\n //    1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 1, 1　    // v4-v7-v6-v5 back\n // ]);\n\n\n  var normals = new Float32Array([    // Normal\n    // 0.0, 0.0, 1.0,   0.0, 0.0, 1.0,   0.0, 0.0, 1.0,   0.0, 0.0, 1.0,  // v0-v1-v2-v3 front\n    1.0, 0.0, 0.0,   1.0, 0.0, 0.0,   1.0, 0.0, 0.0,   1.0, 0.0, 0.0,  // v0-v3-v4-v5 right\n    0.0, 1.0, 0.0,   0.0, 1.0, 0.0,   0.0, 1.0, 0.0,   0.0, 1.0, 0.0,  // v0-v5-v6-v1 up\n   1.0, 0.0, 0.0,  1.0, 0.0, 0.0,  1.0, 0.0, 0.0,  1.0, 0.0, 0.0,  // v1-v6-v7-v2 left\n    0.0,1.0, 0.0,   0.0,1.0, 0.0,   0.0,1.0, 0.0,   0.0,1.0, 0.0,  // v7-v4-v3-v2 down\n    0.0, 0.0,1.0,   0.0, 0.0,1.0,   0.0, 0.0,1.0,   0.0, 0.0,1.0   // v4-v7-v6-v5 back\n  ]);\n\n\n  // Indices of the vertices\n  var indices = new Uint8Array([\n     0, 1, 2,   0, 2, 3,    // right\n     4, 5, 6,   4, 6, 7,    // up\n     8, 9,10,   8,10,11,    // left\n    12,13,14,  12,14,15,    // down\n    16,17,18,  16,18,19    // back\n    // 20,21,22,  20,22,23     // back front\n ]);"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,